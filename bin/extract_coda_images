#!/bin/bash
set -o nounset
set -o errexit
#set -o pipefail  

#
# Script by Whitney Armstrong <whit@jlab.org>
#

function print_the_help {
  echo "USAGE: ${0} [-r] [-p] [-h] DAT-FILE"
  echo "  "
  echo "  DESCRIPTION:" 
  echo "          ${0} extracts the spectrometer camers angles from the raw coda files."
  echo "  "
  echo "  ARGUMENTS: "
  echo "          DAT-FILE           CODA file (e.g. raw/coin_all_01234.dat)"
  echo "  OPTIONS: "
  echo "          -r,--run <number>  Run Number (default:0) is currently only used for output file name."
  echo "          -t,--tag <tag>     File tag is appended to the output file name : shms_angle_0_<tag>.jpg"
  #echo "          -y,--yes           Automatically submit log entries (does not prompt for y/n)"
  echo "          -p,--png           Convert the output Output a png file instead"
  echo "          -d,--debug         Debug printing"
  echo "          -h,--help          Print this help"
  echo "  "
  echo "  "
  echo " Please report bugs to Whitney Armstrong <whit@jlab.org>  "
  echo "  "
  exit 
}

function yes_or_no {
  while true; do
    read -p "$* [y/n]: " yn
    case $yn in
      [Yy]*) return 0 ;;
      [Nn]*) echo "No entered" ; return 1 ;;
    esac
  done
}

if [[ $# -eq 0 ]] ; then
  print_the_help
  exit 
fi

DEBUG=
TAG=
RUNNUM=0
POSITIONAL=()
TO_PNG=

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -h|--help)
      shift # past argument
      print_the_help
      ;;
    -d|--debug)
      shift # past argument
      DEBUG=1
      ;;
    -r|--run)
      RUNNUM="$2"
      shift # past argument
      shift # past value
      ;;
    -t|--tag)
      TAG="$2"
      shift # past argument
      shift # past value
      ;;
    -p|--png)
      TO_PNG=1
      shift # past argument
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

command -v convert >/dev/null 2>&1 || { echo >&2 "'convert' is missing. Install imagemagik. Aborting."; exit 1; }
command -v evio2xml >/dev/null 2>&1 || { echo >&2 "'evio2xml' is missing. Install evio. Aborting."; exit 1; }
command -v uudecode >/dev/null 2>&1 || { echo >&2 "'uudecode' is missing. Install sharutils package. Aborting."; exit 1; }

inputfile=$1

# Create temporary file with only the first 10000 lines (in xml format) 
file_head=$(mktemp)
evio2xml ${inputfile} | head -n 1000000 > ${file_head}

if [[ -n "${DEBUG}" ]] ; then
  echo "${file_head}"
fi

readarray -t xx < <(grep --byte-offset --text "begin [0-9][0-9]*" ${file_head} )
#printf 'line: %s\n' "${xx[@]}"

for startbyte in "${xx[@]}"
do

  # image file name 
  aname=$(echo "${startbyte}" | cut -d " " -f 3)
  #echo "${aname}"
  output_name_base=$(basename ${aname} .jpg)
  output_file="$(mktemp).uu"
  output_image="$(mktemp).jpg"

  if [[ -z "${TAG}" ]] ; then
    jpg_output_image="${output_name_base}_${RUNNUM}.jpg"
    png_output_image="${output_name_base}_${RUNNUM}.png"
  else 
    jpg_output_image="${output_name_base}_${RUNNUM}_${TAG}.jpg"
    png_output_image="${output_name_base}_${RUNNUM}_${TAG}.png"
  fi 

  cat /dev/null > ${output_file}
  echo "${startbyte}" | cut -d ":" -f 2 > ${output_file}

  # get array of all "begin PART"s 
  readarray -t byte_starts < <(grep -n --only-matching --text "begin PART ${aname}.uu.[a-z][a-z]" ${file_head} )

  n_starts=${#byte_starts[@]}
  last_start=${byte_starts[$((n_starts - 1))]}

  # get array of all the ends ""s 
  readarray -t byte_stops < <(grep -n --only-matching --text "^\]\]>$" ${file_head} )

  n_stops=${#byte_stops[@]}

  #echo "Starts: ${#byte_starts[@]}"
  #echo "Stops : ${#byte_stops[@]}"

  stop_index_offset=0
  for ((i=0;i<${n_stops};++i)); do
    a_start_byte=$(echo "${byte_starts[0]}" | cut -d ":" -f 1)
    b_start_byte=$(echo "${byte_starts[1]}" | cut -d ":" -f 1)
    a_stop_byte=$(echo "${byte_stops[${i}]}" | cut -d ":" -f 1)

    if (( (${a_start_byte} < ${a_stop_byte}) && (${b_start_byte} > ${a_stop_byte}) )) ; then
      stop_index_offset=${i}
      break;
    fi
# grep -n --only-matching --text "^\]\]>$"
  done
  #echo "offset: ${stop_index_offset}"

  for ((i=0; i< ${n_starts};++i)); do

    ind="$((${i} + ${stop_index_offset}))"

    #apart_start=${byte_starts[${i}]}
    #apart_stop=${byte_stops[${ind}]}

    a_start_byte=$(echo "${byte_starts[${i}]}" | cut -d ":" -f 1)
    a_stop_byte=$(echo "${byte_stops[${ind}]}" | cut -d ":" -f 1)

    if (( ${a_start_byte} > ${a_stop_byte} )) ;
    then

      if [[ -n "${DEBUG}" ]] ; then
        echo "bad : ${a_start_byte} - ${a_stop_byte}"
      fi
    #while (( (${a_start_byte} < ${a_stop_byte}) && (${b_start_byte} > ${a_stop_byte}) )) ;
    #if (( !(${a_start_byte} < ${a_stop_byte} && ${b_start_byte} > ${a_stop_byte}) )) ;
    #then
      stop_index_offset=$(( ${stop_index_offset} + 1 ))
      ind=$((${i} + ${stop_index_offset}))
      #apart_stop=${byte_stops[${ind}]}
      a_stop_byte=$(echo "${byte_stops[${ind}]}" | cut -d ":" -f 1)
    fi

    if [[ -n "${DEBUG}" ]] ; then
      echo "${a_start_byte} - ${a_stop_byte}"
    fi

    # Printing out the uuencoded file parts.
    # Note the extra sed stuff is needed to clean up the part because 
    # sometimes the epics variables printing overlaps or is concatenated with
    # the uuencoded file part. 
    # This is either (1) a bug when the file is being injected by coda (or some script) 
    # into the raw output file, or (2) a bug in evio2xml where the end of CDATA block is
    # not seen.  \TODO fix and/or report his bug!
    # 
      head -n $((${a_stop_byte} - 1)) ${file_head} \
      | tail -n $((${a_stop_byte} - ${a_start_byte} - 1))  \
      | sed  '/^.\{1,56\}$/p ; /^\(M\)/!d' \
      | sed '/[ \t]/d' \
      >> ${output_file}


    if [[ -n "${DEBUG}" ]] ; then
      echo " --------- "
        head -n $((${a_stop_byte} - 1)) ${file_head} \
        | tail -n $((${a_stop_byte} - ${a_start_byte} )) \
        | sed  '/^.\{1,56\}$/p ; /^\(M\)/!d' \
        | sed '/[ \t]/d' \
        | head -n 4 

      echo " ......... "
        head -n $((${a_stop_byte})) ${file_head} \
        | tail -n $((${a_stop_byte} - ${a_start_byte} )) \
        | sed  '/^.\{1,56\}$/p ; /^\(M\)/!d' \
        | sed '/[ \t]/d' \
        | tail -n 4 

    fi
  done
  echo "\`" >> ${output_file}
  echo "end" >> ${output_file}

  uudecode -o ${output_image} ${output_file}

  if [[ -n "${DEBUG}" ]] ; then
    echo "${output_image}"
  fi

  # convert to png file
  if [[ ${TO_PNG} ]] ; then
    convert ${output_image} ${png_output_image}
    echo "${png_output_image}"
  else 
    cp ${output_image} ${jpg_output_image}
    echo "${jpg_output_image}"
  fi
  rm "${output_image}"

  if [[ -n "${DEBUG}" ]] ; then
    echo "${file_head}"
  else 
    rm "${output_file}"
  fi
done

if [[ -n "${DEBUG}" ]] ; then
  echo "${file_head}"
else 
  rm -f "${file_head}"
fi

